/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface UserManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCoordinate"
      | "addUser"
      | "checkUserExists"
      | "deleteCoordinates"
      | "getAllUsers"
      | "getUser"
      | "getUserCoordinates"
      | "getUserCount"
      | "updateUser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CoordinateAdded" | "UserAdded" | "UserUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCoordinate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUserExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCoordinates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserCoordinates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUser",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCoordinate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkUserExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteCoordinates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserCoordinates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
}

export namespace CoordinateAddedEvent {
  export type InputTuple = [
    document_number: string,
    latitude: BigNumberish,
    longitude: BigNumberish
  ];
  export type OutputTuple = [
    document_number: string,
    latitude: bigint,
    longitude: bigint
  ];
  export interface OutputObject {
    document_number: string;
    latitude: bigint;
    longitude: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserAddedEvent {
  export type InputTuple = [
    document_number: string,
    name: string,
    email: string
  ];
  export type OutputTuple = [
    document_number: string,
    name: string,
    email: string
  ];
  export interface OutputObject {
    document_number: string;
    name: string;
    email: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserUpdatedEvent {
  export type InputTuple = [
    document_number: string,
    name: string,
    email: string
  ];
  export type OutputTuple = [
    document_number: string,
    name: string,
    email: string
  ];
  export interface OutputObject {
    document_number: string;
    name: string;
    email: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserManagement extends BaseContract {
  connect(runner?: ContractRunner | null): UserManagement;
  waitForDeployment(): Promise<this>;

  interface: UserManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCoordinate: TypedContractMethod<
    [
      _document_number: string,
      _latitude: BigNumberish,
      _longitude: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addUser: TypedContractMethod<
    [_name: string, _surname: string, _email: string, _document_number: string],
    [void],
    "nonpayable"
  >;

  checkUserExists: TypedContractMethod<
    [_document_number: string],
    [boolean],
    "view"
  >;

  deleteCoordinates: TypedContractMethod<
    [_document_number: string],
    [void],
    "nonpayable"
  >;

  getAllUsers: TypedContractMethod<
    [],
    [
      [string[], string[], string[], string[]] & {
        names: string[];
        surnames: string[];
        emails: string[];
        document_numbers: string[];
      }
    ],
    "view"
  >;

  getUser: TypedContractMethod<
    [_document_number: string],
    [
      [string, string, string, string, bigint] & {
        name: string;
        surname: string;
        email: string;
        document_number: string;
        coordinateCount: bigint;
      }
    ],
    "view"
  >;

  getUserCoordinates: TypedContractMethod<
    [_document_number: string],
    [
      [bigint[], bigint[], bigint[]] & {
        latitudes: bigint[];
        longitudes: bigint[];
        timestamps: bigint[];
      }
    ],
    "view"
  >;

  getUserCount: TypedContractMethod<[], [bigint], "view">;

  updateUser: TypedContractMethod<
    [_name: string, _surname: string, _email: string, _document_number: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCoordinate"
  ): TypedContractMethod<
    [
      _document_number: string,
      _latitude: BigNumberish,
      _longitude: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUser"
  ): TypedContractMethod<
    [_name: string, _surname: string, _email: string, _document_number: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkUserExists"
  ): TypedContractMethod<[_document_number: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "deleteCoordinates"
  ): TypedContractMethod<[_document_number: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllUsers"
  ): TypedContractMethod<
    [],
    [
      [string[], string[], string[], string[]] & {
        names: string[];
        surnames: string[];
        emails: string[];
        document_numbers: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [_document_number: string],
    [
      [string, string, string, string, bigint] & {
        name: string;
        surname: string;
        email: string;
        document_number: string;
        coordinateCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCoordinates"
  ): TypedContractMethod<
    [_document_number: string],
    [
      [bigint[], bigint[], bigint[]] & {
        latitudes: bigint[];
        longitudes: bigint[];
        timestamps: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateUser"
  ): TypedContractMethod<
    [_name: string, _surname: string, _email: string, _document_number: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CoordinateAdded"
  ): TypedContractEvent<
    CoordinateAddedEvent.InputTuple,
    CoordinateAddedEvent.OutputTuple,
    CoordinateAddedEvent.OutputObject
  >;
  getEvent(
    key: "UserAdded"
  ): TypedContractEvent<
    UserAddedEvent.InputTuple,
    UserAddedEvent.OutputTuple,
    UserAddedEvent.OutputObject
  >;
  getEvent(
    key: "UserUpdated"
  ): TypedContractEvent<
    UserUpdatedEvent.InputTuple,
    UserUpdatedEvent.OutputTuple,
    UserUpdatedEvent.OutputObject
  >;

  filters: {
    "CoordinateAdded(string,int256,int256)": TypedContractEvent<
      CoordinateAddedEvent.InputTuple,
      CoordinateAddedEvent.OutputTuple,
      CoordinateAddedEvent.OutputObject
    >;
    CoordinateAdded: TypedContractEvent<
      CoordinateAddedEvent.InputTuple,
      CoordinateAddedEvent.OutputTuple,
      CoordinateAddedEvent.OutputObject
    >;

    "UserAdded(string,string,string)": TypedContractEvent<
      UserAddedEvent.InputTuple,
      UserAddedEvent.OutputTuple,
      UserAddedEvent.OutputObject
    >;
    UserAdded: TypedContractEvent<
      UserAddedEvent.InputTuple,
      UserAddedEvent.OutputTuple,
      UserAddedEvent.OutputObject
    >;

    "UserUpdated(string,string,string)": TypedContractEvent<
      UserUpdatedEvent.InputTuple,
      UserUpdatedEvent.OutputTuple,
      UserUpdatedEvent.OutputObject
    >;
    UserUpdated: TypedContractEvent<
      UserUpdatedEvent.InputTuple,
      UserUpdatedEvent.OutputTuple,
      UserUpdatedEvent.OutputObject
    >;
  };
}
