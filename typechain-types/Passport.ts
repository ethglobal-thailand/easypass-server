/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Passport {
  export type CountryStruct = { name: string; date: string; isVisit: boolean };

  export type CountryStructOutput = [
    name: string,
    date: string,
    isVisit: boolean
  ] & { name: string; date: string; isVisit: boolean };
}

export interface PassportInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCountryToPerson"
      | "addPerson"
      | "getAllPeople"
      | "getPerson"
      | "getPersonCount"
      | "isPersonExist"
      | "removeAllPeople"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CountryAdded" | "PersonAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCountryToPerson",
    values: [string, string, boolean, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPerson",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPeople",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPerson", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPersonCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPersonExist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllPeople",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCountryToPerson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPerson", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPeople",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPerson", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPersonCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPersonExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllPeople",
    data: BytesLike
  ): Result;
}

export namespace CountryAddedEvent {
  export type InputTuple = [document_number: string, country_name: string];
  export type OutputTuple = [document_number: string, country_name: string];
  export interface OutputObject {
    document_number: string;
    country_name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PersonAddedEvent {
  export type InputTuple = [document_number: string, name: string];
  export type OutputTuple = [document_number: string, name: string];
  export interface OutputObject {
    document_number: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Passport extends BaseContract {
  connect(runner?: ContractRunner | null): Passport;
  waitForDeployment(): Promise<this>;

  interface: PassportInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCountryToPerson: TypedContractMethod<
    [
      country_name: string,
      visit_date: string,
      isVisit: boolean,
      _document_number: string,
      _name: string,
      _surname: string,
      _country: string,
      _birthdate: string
    ],
    [void],
    "nonpayable"
  >;

  addPerson: TypedContractMethod<
    [
      _document_number: string,
      _name: string,
      _surname: string,
      _country: string,
      _birthdate: string
    ],
    [void],
    "nonpayable"
  >;

  getAllPeople: TypedContractMethod<
    [],
    [
      [string[], string[], string[], string[], string[]] & {
        names: string[];
        documents: string[];
        surnames: string[];
        countries: string[];
        birthdates: string[];
      }
    ],
    "view"
  >;

  getPerson: TypedContractMethod<
    [_document_number: string],
    [
      [string, string, string, string, Passport.CountryStructOutput[]] & {
        name: string;
        surname: string;
        country: string;
        birthdate: string;
        countries: Passport.CountryStructOutput[];
      }
    ],
    "view"
  >;

  getPersonCount: TypedContractMethod<[], [bigint], "view">;

  isPersonExist: TypedContractMethod<
    [_document_number: string],
    [boolean],
    "view"
  >;

  removeAllPeople: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCountryToPerson"
  ): TypedContractMethod<
    [
      country_name: string,
      visit_date: string,
      isVisit: boolean,
      _document_number: string,
      _name: string,
      _surname: string,
      _country: string,
      _birthdate: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPerson"
  ): TypedContractMethod<
    [
      _document_number: string,
      _name: string,
      _surname: string,
      _country: string,
      _birthdate: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllPeople"
  ): TypedContractMethod<
    [],
    [
      [string[], string[], string[], string[], string[]] & {
        names: string[];
        documents: string[];
        surnames: string[];
        countries: string[];
        birthdates: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPerson"
  ): TypedContractMethod<
    [_document_number: string],
    [
      [string, string, string, string, Passport.CountryStructOutput[]] & {
        name: string;
        surname: string;
        country: string;
        birthdate: string;
        countries: Passport.CountryStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPersonCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isPersonExist"
  ): TypedContractMethod<[_document_number: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAllPeople"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CountryAdded"
  ): TypedContractEvent<
    CountryAddedEvent.InputTuple,
    CountryAddedEvent.OutputTuple,
    CountryAddedEvent.OutputObject
  >;
  getEvent(
    key: "PersonAdded"
  ): TypedContractEvent<
    PersonAddedEvent.InputTuple,
    PersonAddedEvent.OutputTuple,
    PersonAddedEvent.OutputObject
  >;

  filters: {
    "CountryAdded(string,string)": TypedContractEvent<
      CountryAddedEvent.InputTuple,
      CountryAddedEvent.OutputTuple,
      CountryAddedEvent.OutputObject
    >;
    CountryAdded: TypedContractEvent<
      CountryAddedEvent.InputTuple,
      CountryAddedEvent.OutputTuple,
      CountryAddedEvent.OutputObject
    >;

    "PersonAdded(string,string)": TypedContractEvent<
      PersonAddedEvent.InputTuple,
      PersonAddedEvent.OutputTuple,
      PersonAddedEvent.OutputObject
    >;
    PersonAdded: TypedContractEvent<
      PersonAddedEvent.InputTuple,
      PersonAddedEvent.OutputTuple,
      PersonAddedEvent.OutputObject
    >;
  };
}
